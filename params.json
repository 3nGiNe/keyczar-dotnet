{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Keyczar dotnet #\r\nImplemented in C# 4 to match up with the Java/Python/C++ Keyczar standard features and will interoperate with them by default. Uses BouncyCastle as backend for most encryption. Official keyczar site: http://keyczar.org\r\n\r\n## Binary Release ##\r\n`Keyczar.dll` and `KeyczarTool.exe` can be added to your project using [NuGet](http://nuget.org)\r\n```\r\nPM> Install-Package Keyczar -Pre\r\n```\r\nAlthough it's currently listed as pre-release in NuGet, Keyczar-dotnet currently has over **400** unit tests providing **90%** code coverage and is tested against java Keyczar produced data as well. Because it is a security framework I'm going to keep it conservatively listed under pre-release until more eyes have been on the code.\r\n\r\nSource Code for debugging NuGet provided binaries can be downloaded automatically in Visual Studio by configuring [SymbolSource.org](http://www.symbolsource.org/Public/Home/VisualStudio).\r\n\r\n## Usage ##\r\n\r\n`KeyczarTool.exe` provides the primary mechanism for creating and managing keysets. Calling `KeyczarTool.exe` from the command line without flags will display usage. Use it to create your key set first and use it to rotate your keys latter.\r\n\r\nOnce you have your key set the basic api is very simple to use for encryption:\r\n```csharp\r\nstring plaintext = \"Secret Message\"\r\nWebBase64 ciphertext;\r\n//encrypting\r\nusing (var encrypter = new Encrypter(\"path_to_keyset\"))\r\n{\r\n    ciphertext = encrypter.Encrypt(plaintext);\r\n}\r\n//decrypting\r\nusing (var crypter = new Crypter(\"path_to_keyset\")){\r\n    var plaintext2 = crypter.Decrypt(ciphertext)\r\n}\r\n```\r\nand for signatures:\r\n```csharp\r\nstring plaintext = \"A Message\"\r\nWebBase64 signature;\r\n//signing\r\nusing (var signer = new Signer(\"path_to_keyset\"))\r\n{\r\n    signature = signer.Sign(plaintext);\r\n}\r\n//verifying\r\nusing (var verifier = new Verifier(\"path_to_keyset\"))\r\n{\r\n    var isVerified = verifier.Verify(plaintext, signature);\r\n}\r\n```\r\n\r\nSee more usage and documentation in the [Wiki](http://github.com/jbtule/keyczar-dotnet/wiki).\r\n\r\n## Dependencies ##\r\n\r\n - .net 4.0 or mono v2.10\r\n\r\n#### Keyczar.dll ####\r\n\r\n - [BouncyCastle 1.7.0 or later](http://www.bouncycastle.org/csharp/)\r\n - [DotNetZip 1.9.1.8 or later](http://dotnetzip.codeplex.com/)\r\n - [Newtonsoft.Json 4.5.8 or later](http://json.codeplex.com/)\r\n\r\n#### KeyczarTool.exe ####\r\n\r\n - [ManyConsole 0.4.2.8 or later](https://github.com/fschwiet/ManyConsole)\r\n - [NDesk.Options 0.2.1 or later](http://www.ndesk.org/Options)\r\n - [DiminishDependencies 1.1.3 or later](https://github.com/jbtule/diminish-dependencies)\r\n\r\n\r\n#### KeyczarTest.dll ####\r\n\r\n - [NUnit 2.6.1 or later](http://www.nunit.org/)\r\n\r\n\r\n## Build ##\r\n\r\n#### Visual Studio 2010 or Later ####\r\n\r\nDependencies should be downloaded automaticially with [NuGet](http://nuget.org) which is integrated into the solution. Build all should trigger nuget to download all dependencies. \r\n\r\n#### MonoDevelop v3.0.4 or later ####\r\n\r\nRun `MonoRestoreNugetPackages.sh` script first to restore NuGet dependency then you may build from MonoDevelop with `Build All`. Current Nuget.exe version, included, now restores reliably on mono.\r\n\r\n## Contribute ##\r\n\r\nCode contribution, reported issues or code reviews welcome!\r\n\r\n## Compatibility ##\r\n\r\n- Should interoperate with java/python/c++ with standard api\r\n- All unofficial/incompatible api changes are under the unofficial names space to be clear what won't interoperate with java/python/c++\r\n- Currently the only unofficial algorithm is *AES-GCM* (`KeyType=C#_AES_AEAD`) using the unofficial flag on the KeyczarTool will use it to replace *AES-Then-HmacSha1*\r\n- `VanillaSigner` and `VanillaVerifier` are feature identical to java/python/c++ `UnversionedSigner` and `UnversionedVerifer`\r\n- The Functionality of java/python/c++ `SessionEncrypter`, `SessionDecrypter`, `SignedSessionEncrypter`, and `SignedSessionDecrypter` are provided by the C# `SessionCrypter` via constructor arguments.","name":"Keyczar-dotnet","tagline":"C# implementation of Google's high level encryption API known as Keyczar.","google":"UA-74886-9"}