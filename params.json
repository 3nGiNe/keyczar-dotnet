{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Keyczar dotnet #\r\nImplmemented in C# 4 to match up with the Java/Python/C++ Keyczar standard features and will interoperate with them by default. Uses BouncyCastle as backend for most encryption. Official keyczar site: http://keyczar.org\r\n\r\n## Usage ##\r\n\r\n`KeyczarTool.exe` provides the primary mechanism for creating and managing keysets. Calling `KeyczarTool.exe` from the commandline without flags will display usage. Use it to create your key set first and use it to rotate your keys latter.\r\n\r\nOnce you have your key set the basic api is very simple to use for encryption:\r\n```csharp\r\n           string plaintext = \"Secret Message\"\r\n           string ciphertext;\r\n           //encrypting\r\n           using (var encrypter = new Encrypter(\"path_to_keyset\"))\r\n            {\r\n               ciphertext = encrypter.Encrypt(plaintext);\r\n            }\r\n           //decrypting\r\n           using (var crypter = new Crypter(\"path_to_keyset\")){\r\n                 var plaintext2 = crypter.Decrypt(ciphertext)\r\n           }\r\n```\r\nand for signatures:\r\n```csharp\r\n            string plaintext = \"A Message\"\r\n            string signature;\r\n            //signing\r\n            using (var signer = new Signer(\"path_to_keyset\"))\r\n            {\r\n                signature = signer.Sign(plaintext);\r\n            }\r\n            //verifying\r\n            using (var verifier = new Verifier(\"path_to_keyset\"))\r\n            {\r\n                var isVerified = verifier.Verify(plaintext, signature);\r\n            }\r\n```\r\n\r\nSee more usage examples in the [Wiki](http://github.com/jbtule/keyczar-dotnet/wiki).\r\n\r\n## Dependancies ##\r\n\r\n - .net 4.0 or mono v2.10\r\n\r\n#### Keyczar.dll ####\r\n\r\n - [BouncyCastle 1.7.0 or later](http://www.bouncycastle.org/csharp/)\r\n - [DotNetZip 1.9.1.8 or later](http://dotnetzip.codeplex.com/)\r\n - [Newtonsoft.Json 4.5.8 or later](http://json.codeplex.com/)\r\n\r\n#### KeyczarTool.exe ####\r\n\r\n - [ManyConsole 0.4.2.8 or later](https://github.com/fschwiet/ManyConsole)\r\n - [NDesk.Options 0.2.1 or later](http://www.ndesk.org/Options)\r\n - [DiminishDependencies 1.1.2 or later](https://github.com/jbtule/diminish-dependencies)\r\n\r\n\r\n#### KeyczarTest.dll ####\r\n\r\n - [NUnit 2.6.1 or later](http://www.nunit.org/)\r\n\r\n\r\n## Build ##\r\n\r\n#### Visual Studio 2010 or Later ####\r\n\r\nDependencies should be downloaded automaticially with [nuget](http://nuget.org) which is integrated into the solution. Build all triggers nuget.\r\n\r\n#### MonoDevelop v3.0.4 or later ####\r\n\r\nRun `MonoRestoreNugetPackages.sh` script first to restore nuget dependency then builds fine from monodevelop. Sometimes nuget.exe under mono has weird null exceptions, repeating running the script usually fixes this issue.\r\n\r\n## Compatibility ##\r\n\r\n - Should interoperate with java/python/c++ with standard api\r\n - All unofficial/incompatible api changes are under the unofficial names space to be clear what won't interoperate with java/python/c++\r\n - Currently the only unofficial algorithm is *AES-GCM* (`KeyType=C#_AES_AEAD`) using the unofficial flag on the KeyczarTool will use it to replace *AES-Then-HmacSha1*\r\n - `VanillaSigner` and `VanillaVerifier` are feature identical to `UnversionedSigner` and `UnversionVerifer`\r\n - Since `SessionEncrypter` and `SessionDecrypter` are marked as deprecated in the java version they were not implemented.\r\n - Also `SignedSessionEncrypter` and `SignedSessionDecrypter` have not been implemented (But `SessionCrypter` does provide authenticated encryption on it's session data).","tagline":"C# implementation of Google's high level encryption API known as Keyczar.","name":"Keyczar-dotnet","google":"UA-74886-9"}